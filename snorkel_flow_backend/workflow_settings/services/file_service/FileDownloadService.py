"""
FileDownloadService.py

The module provides a service that enables the download of a file (dataset).

Classes:
- FileDownloadService
"""

import json

import pandas as pd
from django.http import HttpResponse
from rest_framework import status

from snorkel_flow_backend.settings import MEDIA_ROOT
from workflow_settings.models import File, Run


class FileDownloadService:
    """
    Service class for handling file (annotated datasets) downloads.

    Methods:
        - download_annotated_dataset(run_id):
            Downloads the annotated dataset for a given run.
    """

    def download_annotated_dataset(self, run_id):
        """
        Prerequisite:
        The labels generated by the label function must have been combined
        into a single label before the download, otherwise an error will be displayed.

        Downloads the annotated dataset for a given run. The generated labels are
        retrieved from the database and the uploaded data record is modified.
        The labels are written to the ‘class’ column of the ‘unlabelled’ data points.
        The data set is returned as a blob object via an HTTP response.

        Args:
            run_id (int): The ID of the run for which to download the annotated dataset.

        Returns:
            - HttpResponse: The HTTP response with the Blob object if successful, otherwise None.
            - int: The HTTP status code if an error occurred, otherwise None.
            - dict: A dictionary with an error message if an error occurred, otherwise None.
        """

        response = HttpResponse(content_type="text/csv", status=status.HTTP_200_OK)
        response["Content-Disposition"] = "attachment; filename=filename.csv"

        run_filter = Run.objects.filter(pk=run_id)
        if run_filter.exists():
            run_object = run_filter[0]
            if run_object.labelmodel is not None:
                workflow_id = run_object.workflow.id
                file_filter = File.objects.filter(workflow_id=workflow_id)
                if file_filter.exists():
                    file_object = file_filter[0]
                    unlabeled_pred = list(json.loads(run_object.preds_unlabeled))
                    file_name = file_object.__str__()
                    file_path = f"{MEDIA_ROOT}/{file_name}"
                    dataframe = pd.read_csv(file_path)

                    def get_new_value(row):
                        if row["splitting_id"] == "unlabeled":
                            return unlabeled_pred.pop(0)
                        return row["class"]

                    dataframe["class"] = dataframe.apply(get_new_value, axis=1)
                    dataframe.to_csv(path_or_buf=response)

                    return response, None, None
                return (
                    None,
                    status.HTTP_404_NOT_FOUND,
                    {"message": "There was no dataset uploaded"},
                )
            return (
                None,
                status.HTTP_400_BAD_REQUEST,
                {
                    "message": "A classifier must be trained for the download. Go to step 3."
                },
            )
        return None, status.HTTP_404_NOT_FOUND, {"message": "The run doesn't exists"}
